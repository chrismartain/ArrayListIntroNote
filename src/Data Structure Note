Data Structure

* Data Structures are ways to store Data in a computer Program.
* Different data Structures exist because some are faster than others
or more suitable for some particular tasks

 An Example is a DataStructure like the following

 - Elements get appended at the end of the structure
 - Elements get removed from the beginning of the structure
 - How is this DataStructure called ?
   Since we are talking about Object oriented programming a sequence like
   the one described above can be called a QUEUE
 - Just think of people in a Queue: First-in, first-out

   [2][4][6][8][10][12]
   [1][3][5][7][9][11]

   The most common data Structures are:

   _ Queue
   - Stack
   - Set
   - Binary tree
 We Will start our exercise by explaining and implementing a list first
 And we then move to the implementation of a Queue.
    INTRODUCTION TO LINKED LIST

    - A linked list is a sequence of items which are not fully independent
    - Each item in this sequence knows where the next items is (hence the Linked part)
      means each items in the list has a pointer and it's point to the location in our
      computer's memory where the following item in the list is stored. This makes going
      from one item to the next very quickly without having to look in memory and search
      for it

  Example:

        - Let imagine we are creating a  Linked List of Students
        - Each element (Node) holds the name, matriculation number, and year of study
          for each student.:

          Node
        String name                                                                                      NULL
       String matric_number             NB: "George"                                                      ^
        int year_study                     "1575465G"                                                     |
          Node next                         "2"                                                           |
                                           Node next ---------->> : "Anna"                                |
                                                                 "3324515P"                               |
      The Class node has the same dataType as the                    3                                    |
      variable next                                                Node next -------->> : "Philip"        |
                                                                                          "7785657L"      |
                                                                                              3           |
                                                                                            Node Next-----|



       As we can see in the Illustration above the nodes in the sequence have
       common attribute, and they all contain the variable next which point to the
       location of the following corresponding item in the computer's memory and the
       sequence end when it reaches the item or element Null. meaning there's no more
       items or element in the list/ or sequence. And the process stops.


        IMPLEMENTING THE LINKED LIST

        - NB: we need to create two classes: The node class and the list Class
            - Node (holds the data and the next node)
            - List (Manages the nodes, and holds the first node): Because if each node
            points to the next node then there is node that point to the first one

            This means that:
                    The List class has methods to:
                    - Find a node in the List, for which we need to supply the student name
                    - Add a new node at the beginning of the List
             More Explanation:
                   addToList()
                   - This method is going to take a node as parameter
                   - If the head is null - our List is empty -, we will make the 'head' of the
                   list equal to the new Node
                   - if the List is not empty, we will put this new Node at the beginning, by making the new
                    Node the head of the List, and making it point to the next Node in the List
              Note: attToList()/Application:

              void addToList(){
              //If the head is null, set the head to be the new node
              if(head == null){
                 head = newOne;
                }
                // Else, make the new node "point" to the head
                newOne.setNext(head);
                //And make the new head of the List be the new node
                head = newOne;
                }
              }

         LinkedList Implementation continued.:


                    find(String name)

                    void find(String name){
                            //create a marker Node
                         Node marker = head;
                            //while it is not null
                         while(marker !=null){
                            //See if the marker Node's name equals
                            //what we're looking for
                         if(marker.getName().equals(name)){
                            //if it does, print the Node's details out
                         System.out.println(marker.getName());
                         System.out.println(marker.getMatricNumber());
                         System.out.println(marker.getStudyYear());
                        }
                        marker.getNext();
                      }
                   }

        IMPLEMENTING THE CONTROLLER CLASS.

        The controller class will have a list(Student list)